
// https://repl.it/@fajitafaria/flappybirdwithcollision

/** Class representing a point with 2 coordinates. */
class Point {
    /**
     * Create a point.
     * @param {number} x - The x value.
     * @param {number} y - The y value.
     */
    constructor(x, y) {  
      // Fill in code to set attributes of point
      this.x_ = x;
      this.y_ = y;
    }
    
    /**
     * Returns the distance between itself and another point
     * @param {Point} p the point to find the distance between
     * @return {number} distance between itself and p
     */
    distance(p) {
       return Math.sqrt((this.x_ - p.x)**2 + (this.y_ - p.y)**2);
    }
    
    get x() {
      return this.x_; //this.myPosition.x
    }
    
    get y() {
      return this.y_;
    }
}

/**
 * A Bird class maintains the position of a bird over time
 */
class Bird {
  
  /**
   * Create a new Bird.
   * @param {Point} startPosition - The 2D starting position of the Bird (x, y)
   * @param {number} startXSpeed - The starting horizontal speed of the bird (pixels/second)
   * @param {number} gravity - The change in the y velocity due to gravity (pixels/second)
   * @param {number} flapUpSpeed - The y velocity (opposite direction of gravity) caused by a flap
   */
  
  constructor(startPosition, startXSpeed, gravity, flapUpSpeed) {
    this.myPosition = startPosition;
    this.myCurrentXSpeed = startXSpeed;
    this.myGravity = gravity;
    this.flapSpeed = -flapUpSpeed; 
    this.myCurrentYSpeed = 0; 
    this.height_ = 24;
    this.width_ = 32;
  }
  
  get width() {
    return this.width_;
  }
  
  get height() {
    return this.height_;
  }
  
  /**
   * Updates the position of the bird (both x and y coordinates)
   * @param {number} secondsElapsed - the number of seconds that passed since the last move
   */
  
  move(secondsElapsed) {
    this.newX = this.myPosition.x + secondsElapsed*this.myCurrentXSpeed;
    this.newY = this.myPosition.y + secondsElapsed*this.myCurrentYSpeed;
    this.myPosition = new Point(this.newX, this.newY);
    this.myCurrentYSpeed = this.myCurrentYSpeed + secondsElapsed*this.myGravity;
  }
  
  /**
   * Updates the bird's y velocity caused by a flap given by flapUpSpeed
   */
  
  flap() {
    this.myCurrentYSpeed = this.flapSpeed;
  }
  
  /**
   * @type {Point}
   */
  
  get position() {
    // getter for current position of Bird
    return this.myPosition;
  }
}

class Pipe {
  
  constructor(position){
    this.position_ = position;
    this.gap_ = 100;
    this.width_ = 52;
    this.height_ = 320;
  } 
  
  get gap() {
    return this.gap_;
  }
  
  get width() {
    return this.width_;
  }
  
  get height() {
    return this.height_;
  }
  
  get position() {
    return this.position_;
  }
  
  
}

class PipeWorld {
  constructor() {
    this.pipes_ = [];
    
    // TEMPORARY *****************************
    this.pipeSpeed_ = -1;
    
    // TOP PIPES
    let currentPoint= new Point(350, Math.floor(Math.random()*-260));
    
    for(let i=0; i<4; i++) {
      this.pipes_.push(new Pipe(currentPoint));
      currentPoint = new Point(currentPoint.x+ 250, Math.floor(Math.random()*-260));
    }
    
  }
  
  deleteFirstPipe() {
    this.pipes_.shift();
  }
  
  createNewPipe(newXPos, newYPos) {
    this.pipes_.push(new Pipe(new Point(newXPos, newYPos)));
  }
  
  getPipeNumber(n) {
    return this.pipes_[n];
  }
  
  getNumberOfPipes() {
    return this.pipes_.length;
  }
}  

class PipeWorldView {
  constructor(pw) {
    this.pw_ = pw;
    this.pipeBottomImage_ = new Image();
    this.pipeTopImage_ = new Image();
    this.pipeBottomImage_.src = "https://studio.code.org/blockly/media/skins/flappy/obstacle_bottom.png";
    this.pipeTopImage_.src = "https://studio.code.org/blockly/media/skins/flappy/obstacle_top.png";
  }
  
  render(gameContext, newPipePositionX) {
      // TOP PIPES RENDER
      let currentPipe;

      for(let i = 0; i < this.pw_.getNumberOfPipes(); i++) {
        currentPipe = this.pw_.getPipeNumber(i);
        
        // TOP PIPE
        gameContext.drawImage(this.pipeTopImage_, currentPipe.position.x - newPipePositionX,
              currentPipe.position.y, currentPipe.width, currentPipe.height);
              
        // BOT PIPE
        gameContext.drawImage(this.pipeBottomImage_, currentPipe.position.x - newPipePositionX, currentPipe.position.y + currentPipe.height + currentPipe.gap , currentPipe.width, currentPipe.height);
      }
  }
}

class World {
  
  constructor(){
    // startPosition, startXSpeed, gravity, flapUpSpeed
    this.bird_ = new Bird(new Point(5,5), 200, 200, 130);
    
    this.pw_ = new PipeWorld();
    
    window.addEventListener("click", this.bird_.flap.bind(this.bird_));
  }
  
  checkIfFirstPipeIsOffScreen() {
    // CONDITION: 
    if ( (this.pw_.getPipeNumber(0).position.x - this.bird_.position.x) < -this.pw_.getPipeNumber(0).width ) {
      document.getElementById("lastPipe").value = (this.pw_.getPipeNumber(this.pw_.getNumberOfPipes()-1)).position.x + 250 
      // SHIFT
      this.pw_.deleteFirstPipe();
      
      // PUSH
      // TODO: Something is wrong with this method either on this end or in the pipe world class itself.
      this.pw_.createNewPipe( (this.pw_.getPipeNumber(this.pw_.getNumberOfPipes()-1)).position.x + 250 , Math.floor(Math.random()*-260) );
    }
  }
  
  checkForCollision() {
    // IF BIRD IS CLOSE TO PIPE
    if (this.bird_.position.x >= this.pw_.getPipeNumber(0).position.x - this.bird_.width) {
      // IF BIRD HITS TOP OR IF BIRD HITS BOTTOM
    if ((this.bird_.position.y < (this.pw_.getPipeNumber(0).position.y + this.pw_.getPipeNumber(0)
      .height)) || (this.bird_.position.y > (this.pw_.getPipeNumber(0).position.y + this.pw_
      .getPipeNumber(0).gap + this.pw_.getPipeNumber(0).height - this.bird_.height))) {
      
      return true;
      
      } else {
        
        return false;
      }
    }
  }
  
  get bird() {
    return this.bird_;
  }
  
  get pipeWorld() {
    return this.pw_;
  }
  
}

class WorldView {

  constructor(world){
    
    // GET ACCESS TO MODEL GETTERS
    this.w_ = world;
    this.bird_ = this.w_.bird;
    this.pw_ = this.w_.pipeWorld;
    
    // MAKE NEW PIPE WORLD VIEW OBJECT
    this.pwv_ = new PipeWorldView(this.pw_);
    
    // VIEW PROPERTIES
    this.canvasElement = document.getElementById("game");
    this.gameContext = this.canvasElement.getContext("2d");
    this.birdImage = new Image();
    this.skyBackgroundImage = new Image();
    this.birdImage.src = "https://studio.code.org/blockly/media/skins/flappy/avatar.png";
    this.skyBackgroundImage.src = skyImageData; //"cloud-background.jpg"
  }

  render(){
    
    // CLEAR CANVAS
    this.gameContext.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);  
    
    // DRAW SKY
    this.gameContext.drawImage(this.skyBackgroundImage, -(this.bird_.position.x)% (this.skyBackgroundImage.width-this.canvasElement.width), 0, this.skyBackgroundImage.width, this.skyBackgroundImage.height);
    
    // DRAW TOP AND BOTTOM PIPES
    this.pwv_.render(this.gameContext, this.bird_.position.x);
    
    // DRAW BIRD
    this.gameContext.drawImage(this.birdImage, 5, Math.trunc(this.bird_.position.y), this.birdImage.width, this.birdImage.height);
    
    
  }
  
}

class Rectangle {
  constructor(p, width, height) {
    this._position = p;
    this._width = width;
    this._height = _height;
  }
  
  onScreen(xPos) {
    
  }
  
  get position() {
    return this._position;
  }
  
  get width() {
    return this._width;
  }
  
  get height() {
    return this._height;
  }
}

class Circle {
  constructor(p, r) {
    this._center = p;
    this._radius = r;
  }
  
  get radius() {
    return this._radius;
  }
  
  get center() {
    return this._center;
  }
}



/********************* YOUR CONTROLLER CODE HERE **********************/
class Controller {

  constructor(){
    this.w_ = new World();
    this.wv_ = new WorldView(this.w_);
  }
  
  start() {
    this.lastTimeBirdMove=0;
    
    this.runGame = ms => {
      // CHECK FOR: COLLISION, IF FIRST PIPE IS OFF SCREEN
      if (this.w_.checkForCollision()) {
        console.log("COLLIDE");
      }
      else{
      this.w_.checkIfFirstPipeIsOffScreen();
      
      // BIRD MOVES
      this.w_.bird.move(msToSec(ms - this.lastTimeBirdMove));
      
      // RENDER CHANGES BASED ON BIRD'S MOVEMENT
      this.wv_.render();
      
      // UPDATE lastTimeBirdMove
      this.lastTimeBirdMove = ms;
      
      // ******** BUG TESTING ********
      document.getElementById("input").value = this.w_.bird.position.x;
      document.getElementById("firstPipe").value = this.w_.pipeWorld.getPipeNumber(0).position.x;
      document.getElementById("lastPipe").value = this.w_.pipeWorld.getPipeNumber(this.w_.pipeWorld.getNumberOfPipes()-1).position.x;
      // ********
      }
      requestAnimationFrame(this.runGame);
    };
    
    requestAnimationFrame(this.runGame);
  }
  
}
/*********************************************************************/

let msToSec = milliseconds => milliseconds/1000;
let distance = (v, t) => v * t; 

let c = new Controller();
c.start();

/*
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>repl.it</title>
    <link href="index.css" rel="stylesheet" type="text/css" />
  </head>
  <body>
    <canvas width = "320" height = "480" id = "game"></canvas>
    <script src = "cloud-background.js"></script>
    <script src = "index.js"></script>
    <input id="input">
    <input id="lastPipe">
    <input id="firstPipe">
  </body>
</html>
