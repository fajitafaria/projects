let msToSec = milliseconds => milliseconds/1000;
let distance = (v, t) => v * t;

let canvasElement = document.getElementById("game");
let gameContext = canvasElement.getContext("2d");
let birdImage = new Image();
let skyBackgroundImage = new Image();

/** Class representing a point with 2 coordinates. */
class Point {
    /**
     * Create a point.
     * @param {number} x - The x value.
     * @param {number} y - The y value.
     */
    constructor(x, y) {  
      // Fill in code to set attributes of point
      this.x_ = x;
      this.y_ = y;
    }
    
    /**
     * Returns the distance between itself and another point
     * @param {Point} p the point to find the distance between
     * @return {number} distance between itself and p
     */
    distance(p) {
       return Math.sqrt((this.x_ - p.x)**2 + (this.y_ - p.y)**2);
    }
    
    get x() {
      return this.x_;
    }
    
    get y() {
      return this.y_;
    }
}


/**
 * A Bird class maintains the position of a bird over time
 */
class Bird {
  
  /**
   * Create a new Bird.
   * @param {Point} startPosition - The 2D starting position of the Bird (x, y)
   * @param {number} startXSpeed - The starting horizontal speed of the bird (pixels/second)
   * @param {number} gravity - The change in the y velocity due to gravity (pixels/second)
   * @param {number} flapUpSpeed - The y velocity (opposite direction of gravity) caused by a flap
   */
  
  constructor(startPosition, startXSpeed, gravity, flapUpSpeed) {
    this.position = (this.x_,this.y_);
    this.myStartSpeed = this.x_*0;
    this.myGravity = this.y_-10;
    this.flapSpeed = this.y_+5;
  }
  
  /**
   * Updates the position of the bird (both x and y coordinates)
   * @param {number} secondsElapsed - the number of seconds that passed since the last move
   */
  
  move(secondsElapsed) {
    this.position = this.position + this.myGravity;
  }
  
  /**
   * Updates the bird's y velocity caused by a flap given by flapUpSpeed
   */
  
  flap() {
    this.position = this.position + this.flapSpeed;
  }
  
  /**
   * @type {Point}
   */
  
  get position() {
    // getter for current position of Bird
    return this.position;
  }
}

/********************* YOUR CONTROLLER CODE HERE **********************/
class Controller {

  constructor(m){
    this.control = document.getElementById("game").addEventListener("click", m.flap.bind(m));
  }
}


/*********************************************************************/

class WorldView {

  constructor(bird, sky){
    this.model = "https://studio.code.org/blockly/media/skins/flappy/avatar.png";
    this.canvas = "cloud-background.jpg";
  }

}

class Render {
  
  constructor(){
    this.model.position.x_ = 20;
    this.y_ = this.model.position;
  }  
    
}

birdImage.src = "https://studio.code.org/blockly/media/skins/flappy/avatar.png";
skyBackgroundImage.src = skyImageData; //"cloud-background.jpg"

let startX = 5;
let birdXSpeed = 200; // pixels per second

let render = milliseconds => {
  // clears canvas (clears rectangle with dimensions of canvasWidth x canvasHeight
  // with top left corner at (0,0), i.e., canvas's top left corner)
  gameContext.clearRect(0, 0, canvasElement.width, canvasElement.height);
  
  // update position according to velocity
  currentX = startX + distance(birdXSpeed, msToSec(milliseconds));

  // draw bird in new position (x, y, bird's width, bird's height)
  gameContext.drawImage(birdImage, currentX, 10, birdImage.width, birdImage.height);
  
  //console.log(milliseconds);
  
  requestAnimationFrame(render);
};

requestAnimationFrame(render);

// Below is not needed since image eventually loads on some frame

//img.onload = function() {
//  gameContext.drawImage(img, 5, 10);
//}

