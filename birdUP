let msToSec = milliseconds => milliseconds/1000;
let distance = (v, t) => v * t % 320;

let canvasElement = document.getElementById("game");
let gameContext = canvasElement.getContext("2d");
let birdImage = new Image();
let skyBackgroundImage = new Image();

birdImage.src = "https://studio.code.org/blockly/media/skins/flappy/avatar.png";
skyBackgroundImage.src = skyImageData; //"cloud-background.jpg"

let startX = 0;
let birdXSpeed = 0; // pixels per second

let render = milliseconds => {
gameContext.clearRect(0, 0, canvasElement.width, canvasElement.height);

currentX = startX + distance(-100, msToSec(milliseconds));
gameContext.drawImage(skyBackgroundImage, currentX, 0, skyBackgroundImage.width, skyBackgroundImage.height);
gameContext.drawImage(birdImage, 0, 10, birdImage.width, birdImage.height);

 

requestAnimationFrame(render);
};

requestAnimationFrame(render);

/** Class representing a point with 2 coordinates. */
class Point {
    /**
     * Create a point.
     * @param {number} x - The x value.
     * @param {number} y - The y value.
     */
    constructor(x, y) {  
      // Fill in code to set attributes of point
      this.x_ = x;
      this.y_ = y;
    }
    
    /**
     * Returns the distance between itself and another point
     * @param {Point} p the point to find the distance between
     * @return {number} distance between itself and p
     */
    distance(p) {
       return Math.sqrt((this.x_ - p.x)**2 + (this.y_ - p.y)**2);
    }
    
    get x() {
      return this.x_; //this.myPosition.x
    }
    
    get y() {
      return this.y_;
    }
}

/**
 * A Bird class maintains the position of a bird over time
 */
class Bird {
  
  /**
   * Create a new Bird.
   * @param {Point} startPosition - The 2D starting position of the Bird (x, y)
   * @param {number} startXSpeed - The starting horizontal speed of the bird (pixels/second)
   * @param {number} gravity - The change in the y velocity due to gravity (pixels/second)
   * @param {number} flapUpSpeed - The y velocity (opposite direction of gravity) caused by a flap
   */
  
  constructor(startPosition, startXSpeed, gravity, flapUpSpeed) {
    this.myPosition = startPosition;
    this.myCurrentXSpeed = startXSpeed;
    this.myGravity = gravity;
    this.flapSpeed = flapUpSpeed;
    this.myCurrentYSpeed = 0;
  }
  
  /**
   * Updates the position of the bird (both x and y coordinates)
   * @param {number} secondsElapsed - the number of seconds that passed since the last move
   */
  
  move(secondsElapsed) {
    let newX = this.myPosition.x + secondsElapsed*this.myCurrentXSpeed;
    let newY = this.myPosition.y + secondsElapsed*this.myCurrentYSpeed;
    this.myPosition = new Point(newX, newY);
    this.myCurrentYSpeed = this.myCurrentYSpeed + secondsElapsed*this.gravity;
  }
  
  /**
   * Updates the bird's y velocity caused by a flap given by flapUpSpeed
   */
  
  flap() {
    this.myCurrentYSpeed = flapUpSpeed;
  }
  
  /**
   * @type {Point}
   */
  
  get position() {
    // getter for current position of Bird
    return this.position;
  }
}

let p = new Point(0, 0);
let b = new Bird(p, 10, 5, 2);
b.move;
console.log(b);

/********************* YOUR CONTROLLER CODE HERE **********************/
class Controller {

  constructor(m){
    this.control = document.getElementById("game").addEventListener("click", m.flap.bind(m));
  }
}


/*********************************************************************/

class WorldView {

  constructor(bird, sky){
    this.model = birdImage.src;
    this.canvas = skyBackgroundImage.src;
  }

}

class Render {
  
  constructor(){
    this.model.position.x_ = 20;
    this.y_ = this.model.position;
  }  
    
}
